



{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Python syntax, keywords, and comments",
  "description": "Learn about Python syntax, keywords, and comments.",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "What is the correct syntax to write a comment in Python?",
      "code": "___ This is a comment",
      "answer": "#",
      "explanation": "In Python, comments start with the # symbol.",
      "hints": ["Python uses # for comments", "Comments are ignored by the interpreter"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "Which of the following is a valid Python comment?",
      "options": [
        "# This is a comment",
        "// This is a comment",
        "/* This is a comment */"
      ],
      "answer": 0,
      "explanation": "Python uses # for comments, while // and /* */ are used in other languages.",
      "hints": ["Python does not use // or /* for comments"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "Comments in Python are ignored by the Python interpreter.",
      "answer": true,
      "explanation": "Python ignores comments during execution.",
      "hints": ["Think about what comments do in code"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Rearrange the words to create a valid Python comment:",
      "words": ["code", "this", "a", "is", "#"],
      "answer": "# this is a code",
      "explanation": "A Python comment starts with #, followed by descriptive text.",
      "hints": ["Start with #", "Form a meaningful sentence"]
    },
    {
      "id": 5,
      "type": "fill-blank",
      "question": "Which keyword is used to define a function in Python?",
      "code": "___ my_function():",
      "answer": "def",
      "explanation": "The def keyword is used to define a function in Python.",
      "hints": ["Functions in Python start with def"]
    }
  ],
  "flashcards": [
    {
      "front": "What is the correct syntax to write a comment in Python?",
      "back": "Use # followed by the comment text."
    },
    {
      "front": "Which keyword is used to define a function in Python?",
      "back": "The def keyword is used to define functions."
    },
    {
      "front": "Are Python comments executed by the interpreter?",
      "back": "No, Python ignores comments."
    },
    {
      "front": "What is a Python keyword?",
      "back": "A reserved word with special meaning, such as if, def, or return."
    },
    {
      "front": "How do you write a multi-line comment in Python?",
      "back": "Use triple quotes: ''' or \"\"\"."
    }
  ]
}







{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Python's Interpreter vs. Compiled Languages",
  "description": "Understand the differences between interpreted and compiled languages, focusing on Python's execution process.",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to complete the statement about Python's execution process: Python is an example of a __________ language, meaning it is executed line-by-line by an interpreter.",
      "answer": "interpreted",
      "explanation": "Python is interpreted, meaning it executes code line-by-line without requiring a separate compilation step.",
      "hints": ["Python does not need compilation", "Executed line-by-line"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "Which of the following is true about Python compared to compiled languages?",
      "options": [
        "Python code is translated into machine code before execution.",
        "Python code is executed line-by-line by an interpreter.",
        "Python requires a separate compilation step to run."
      ],
      "answer": 1,
      "explanation": "Python is interpreted, meaning it executes line-by-line instead of being compiled beforehand.",
      "hints": ["Think about how Python runs instantly", "Python does not need a compilation step"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "Python is a compiled language, meaning the entire program is converted into machine code before execution.",
      "answer": false,
      "explanation": "Python is an interpreted language, which means it is executed line-by-line rather than compiled into machine code first.",
      "hints": ["Does Python require a compiler?", "Python runs without compilation"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to form a correct statement about Python's execution:",
      "words": ["line-by-line", "executed", "Python", "is", "code", "by", "an", "interpreter"],
      "answer": "Python code is executed line-by-line by an interpreter.",
      "explanation": "Python is an interpreted language, meaning it executes code step-by-step.",
      "hints": ["Start with 'Python'", "Think about the interpreter"]
    },
    {
      "id": 5,
      "type": "multiple-choice",
      "question": "What is the main difference between Python and a compiled language like C++?",
      "options": [
        "Python requires an interpreter to run.",
        "Python requires a compiler to run.",
        "Python does not need any translation step."
      ],
      "answer": 0,
      "explanation": "Python uses an interpreter to execute code directly.",
      "hints": ["Does Python use a compiler or interpreter?", "Think about instant execution"]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the language to whether it uses an interpreter or a compiler for execution:",
      "code-output-pairs": {
        "Python": "Interpreter",
        "C++": "Compiler"
      },
      "answer": {
        "Python": "Interpreter",
        "C++": "Compiler"
      },
      "explanation": "Python is interpreted, while C++ is compiled.",
      "hints": ["Match Python to interpreter", "Match C++ to compiler"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following are advantages of interpreted languages like Python? (Select all that apply)",
      "options": [
        "Easier to debug",
        "Faster execution",
        "Portability across different platforms"
      ],
      "answer": [0, 2],
      "explanation": "Interpreted languages are easier to debug and more portable but generally slower than compiled languages.",
      "hints": ["Debugging is easier", "Python runs on multiple platforms"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the steps in the correct order for Python execution:",
      "steps": [
        "Python code is written and saved in a .py file.",
        "The interpreter reads and executes the code line-by-line.",
        "The output is displayed on the screen."
      ],
      "answer": [0, 1, 2],
      "explanation": "Python code follows a sequence of being written, interpreted, and then producing output.",
      "hints": ["Start with writing code", "Execution happens next"]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this statement about Python?",
      "code": "Python code is compiled into machine code before execution.",
      "options": [
        "Python code is not compiled.",
        "Python code is compiled into bytecode.",
        "Python code is executed by an interpreter."
      ],
      "answer": 0,
      "explanation": "Python is not compiled but interpreted.",
      "hints": ["Does Python use a compiler?", "Execution happens without compilation"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to demonstrate Python's execution process:",
      "code": "print(___)",
      "answer": "print(\"Python is an interpreted language!\")",
      "explanation": "Python's print() function outputs text directly, demonstrating interpreted execution.",
      "hints": ["Use print()", "Text should be in quotes"]
    }
  ],
  "flashcards": [
    {
      "front": "What is an interpreted language?",
      "back": "An interpreted language executes code line-by-line using an interpreter instead of compiling it beforehand."
    },
    {
      "front": "How does Python execute code?",
      "back": "Python executes code line-by-line through an interpreter."
    },
    {
      "front": "What is the main difference between Python and C++?",
      "back": "Python is interpreted, whereas C++ is compiled."
    },
    {
      "front": "Why is Python considered portable?",
      "back": "Because Python code can run on different platforms without modification, as long as an interpreter is available."
    },
    {
      "front": "What is a downside of interpreted languages?",
      "back": "Interpreted languages are generally slower than compiled languages because they execute code line-by-line."
    }
  ]
}







{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Numbers (integers, floats, complex)",
  "description": "Learn about different numeric types in Python: integers, floating-point numbers, and complex numbers.",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to create a float variable in Python.",
      "code": "x = ___",
      "answer": "3.14",
      "explanation": "Floating-point numbers in Python are represented using a decimal point.",
      "hints": ["Use a decimal point", "Example: 2.5"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "Which of the following is a valid integer in Python?",
      "options": [
        "10.5",
        "10",
        "3 + 2j"
      ],
      "answer": 1,
      "explanation": "Integers in Python are whole numbers without a decimal point.",
      "hints": ["Integers do not have a decimal", "Complex numbers include 'j'"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "In Python, complex numbers are written with a 'j' or 'J' after the number.",
      "answer": true,
      "explanation": "Complex numbers in Python are represented using 'j' as the imaginary unit.",
      "hints": ["Check how Python represents imaginary numbers"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a valid Python statement that assigns a complex number to a variable.",
      "words": ["+2j", "3", "=", "x"],
      "answer": "x = 3 + 2j",
      "explanation": "Complex numbers in Python are written as 'real + imaginary j'.",
      "hints": ["Start with the variable name", "Use '=' to assign values"]
    },
    {
      "id": 5,
      "type": "multiple-choice",
      "question": "What will the following Python code output?",
      "code": """
      a = 5
      b = 3.2
      c = 2 + 3j
      print(a + b)
      """,
      "options": ["8.2", "53.2", "5 + 3.2j"],
      "answer": 0,
      "explanation": "Adding an integer and a float results in a float.",
      "hints": ["Addition between int and float results in float"]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the code with its output.",
      "code-output-pairs": {
        "x = 5; print(type(x))": "<class 'int'>",
        "y = 3.14; print(type(y))": "<class 'float'>",
        "z = 2 + 3j; print(type(z))": "<class 'complex'>"
      },
      "answer": {
        "x = 5; print(type(x))": "<class 'int'>",
        "y = 3.14; print(type(y))": "<class 'float'>",
        "z = 2 + 3j; print(type(z))": "<class 'complex'>"
      },
      "explanation": "The type() function returns the data type of a variable.",
      "hints": ["Use type() to check variable types"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following are valid numbers in Python? (Select all that apply)",
      "options": ["3", "4.2", "5 + 3j"],
      "answer": [0, 1, 2],
      "explanation": "All three are valid number types: int, float, and complex.",
      "hints": ["Check if the option is an int, float, or complex"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the steps in the correct order to create variables of type integer, float, and complex:",
      "steps": [
        "Create a complex number: z = 2 + 3j",
        "Create a float: y = 3.14",
        "Create an integer: x = 10"
      ],
      "answer": [2, 1, 0],
      "explanation": "This is the correct sequence for defining different number types in Python.",
      "hints": ["Start with an integer", "Floats use a decimal point"]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?",
      "code": """
      x = 5.0
      y = 3
      print(x + y)
      """,
      "options": ["There’s no error; the code will work fine", "y should be a float", "x should be an integer"],
      "answer": 0,
      "explanation": "Mixing int and float in an operation results in a float, which is valid.",
      "hints": ["Check Python's implicit type conversion"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to display the following output: 12.0",
      "code": "x = 7\ny = ___\nprint(x + y)",
      "answer": "5.0",
      "explanation": "Adding an integer and a float results in a float output.",
      "hints": ["Ensure y is a float", "Use a decimal"]
    }
  ]
}









{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Strings",
  "description": "Learn how to use and manipulate strings in Python",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to assign the string 'Python' to a variable.",
      "code": "x = ___",
      "answer": "\"Python\"",
      "explanation": "Strings in Python must be enclosed in quotes.",
      "hints": ["Use double or single quotes", "Remember to assign it to x"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "Which of the following is a valid string in Python?",
      "options": ["3.14", "\"Hello, World!\"", "10"],
      "answer": 1,
      "explanation": "Strings must be enclosed in quotes, making option 2 correct.",
      "hints": ["Look for text enclosed in quotes"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "Strings in Python can be enclosed in single quotes (`'`) or double quotes (`"`).",
      "answer": true,
      "explanation": "Both types of quotes are valid for defining strings in Python.",
      "hints": ["Python allows both ' and \""]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a valid Python statement that assigns a string to a variable.",
      "words": ["World!", "Hello", "=", "x"],
      "answer": "x = \"Hello World!\"",
      "explanation": "A valid assignment statement for a string variable.",
      "hints": ["Start with variable name", "Use '=' to assign"]
    },
    {
      "id": 5,
      "type": "multiple-choice",
      "question": "What will the following Python code output?",
      "code": "word = \"Python\"\nprint(word[1])",
      "options": ["P", "y", "t"],
      "answer": 1,
      "explanation": "Indexing starts at 0, so word[1] returns 'y'.",
      "hints": ["Indexing starts at 0", "Look at the second letter"]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the code with its output.",
      "code-output-pairs": {
        "word = \"Python\"; print(word[0])": "P",
        "word = \"Python\"; print(word[-1])": "n",
        "word = \"Python\"; print(word[1:4])": "yth"
      },
      "answer": {
        "word = \"Python\"; print(word[0])": "P",
        "word = \"Python\"; print(word[-1])": "n",
        "word = \"Python\"; print(word[1:4])": "yth"
      },
      "explanation": "Indexing and slicing return the expected characters.",
      "hints": ["Index starts at 0", "Negative indices count from the end"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following are valid string methods in Python? (Select all that apply)",
      "options": ["upper()", "len()", "reverse()"],
      "answer": [0, 1],
      "explanation": "reverse() is not a built-in string method.",
      "hints": ["upper() converts to uppercase", "len() returns string length"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the steps in the correct order to use the `lower()` method on a string:",
      "steps": [
        "Create a string: word = \"HELLO\"",
        "Call the `lower()` method: word_lower = word.lower()",
        "Print the result: print(word_lower)"
      ],
      "answer": [0, 1, 2],
      "explanation": "Methods must be called after defining the string variable.",
      "hints": ["Define variable first", "Call method before printing"]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?",
      "code": "word = \"Python\nprint(word)",
      "options": [
        "The string is missing an ending quote",
        "The variable name is incorrect",
        "The print statement is misspelled"
      ],
      "answer": 0,
      "explanation": "Strings must be properly enclosed in quotes.",
      "hints": ["Check the quotes"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to display the following output:\n\nOutput: Hello, Python!",
      "code": "word = ___\nprint(\"Hello, \" + word + \"!\")",
      "answer": "\"Python\"",
      "explanation": "Strings must be enclosed in quotes.",
      "hints": ["Assign a valid string"]
    }
  ],
  "flashcards": [
    {
      "front": "What is the purpose of strings in Python?",
      "back": "Strings are sequences of characters used to represent text."
    },
    {
      "front": "What is the correct syntax for defining a string?",
      "back": "Use single or double quotes: 'text' or \"text\"."
    },
    {
      "front": "What does the `upper()` method do?",
      "back": "Converts a string to uppercase."
    },
    {
      "front": "What happens if you forget to close a string with a quote?",
      "back": "Python will raise a syntax error."
    },
    {
      "front": "What is string slicing?",
      "back": "Extracting a portion of a string using indices, e.g., `word[1:4]`."
    }
  ]
}






{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Booleans",
  "description": "Understand boolean values and their usage in Python.",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to assign a boolean value of True to a variable.",
      "code": "x = ___",
      "answer": "True",
      "explanation": "In Python, boolean values are represented as True or False.",
      "hints": ["Booleans start with an uppercase letter", "Use True or False"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "Which of the following is a valid boolean value in Python?",
      "options": ["yes", "True", "1"],
      "answer": 1,
      "explanation": "True and False are the only boolean values in Python.",
      "hints": ["Booleans start with uppercase", "Python has specific boolean values"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "The boolean value False is equivalent to the number 0 in Python.",
      "answer": true,
      "explanation": "In Python, False is treated as 0 in numerical contexts.",
      "hints": ["Think about how booleans interact with numbers", "False is equivalent to 0"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a Python statement that assigns a boolean value to a variable.",
      "words": ["True", "=", "is_active"],
      "answer": "is_active = True",
      "explanation": "The correct order forms a valid boolean assignment.",
      "hints": ["Assignment uses =", "Boolean values must be properly capitalized"]
    },
    {
      "id": 5,
      "type": "multiple-choice",
      "question": "What will the following Python code output?",
      "code": """
is_raining = True
if is_raining:
    print(\"Bring an umbrella!\")
""",
      "options": ["Bring an umbrella!", "False", "Bring an umbrella"],
      "answer": 0,
      "explanation": "Since is_raining is True, the if statement executes print().",
      "hints": ["Check the condition inside if", "What happens when is_raining is True?"]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the code with its output.",
      "code-output-pairs": {
        "print(True and False)": "False",
        "print(True or False)": "True",
        "print(not True)": "False"
      },
      "answer": {
        "print(True and False)": "False",
        "print(True or False)": "True",
        "print(not True)": "False"
      },
      "explanation": "Boolean logic determines the output.",
      "hints": ["Review logical operators", "Check how and, or, and not work"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following expressions will result in True? (Select all that apply)",
      "options": ["True and False", "True or False", "not False"],
      "answer": [1, 2],
      "explanation": "'True or False' and 'not False' both evaluate to True.",
      "hints": ["Analyze each logical expression", "Try evaluating each condition"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the steps in the correct order to evaluate a boolean expression.",
      "steps": [
        "Define a variable: is_sunny = True",
        "Evaluate the expression: if is_sunny:",
        "Print the result: print(\"Go outside!\")"
      ],
      "answer": [0, 1, 2],
      "explanation": "This is the correct sequence for evaluating a boolean condition.",
      "hints": ["Start by defining a variable", "Condition must be checked before execution"]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?",
      "code": """
is_active = \"True\"
print(is_active == True)
""",
      "options": [
        "The string 'True' is not a boolean value",
        "The boolean value is written incorrectly",
        "The equality operator is incorrect"
      ],
      "answer": 0,
      "explanation": "'True' is a string, not a boolean value.",
      "hints": ["Check data types", "Boolean and string are different"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to display the following output: \n\nOutput: It's raining!",
      "code": "is_raining = ___\nif is_raining: print(\"It's raining!\")",
      "answer": "True",
      "explanation": "Assigning True to is_raining ensures the if statement runs.",
      "hints": ["Assign a boolean value", "True or False?"]
    }
  ],
  "flashcards": [
    {"front": "What are the two boolean values in Python?", "back": "True and False."},
    {"front": "How do you check if two values are equal?", "back": "Use the == operator."},
    {"front": "What is the result of not False?", "back": "True."},
    {"front": "What does True and False evaluate to?", "back": "False."},
    {"front": "What does True or False evaluate to?", "back": "True."}
  ]
}







{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Type Conversion (int to float, string to int, etc.)",
  "description": "Learn how to convert data types in Python.",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to convert the string '25' to an integer in Python.",
      "code": "int(___)",
      "answer": "'25'",
      "explanation": "The int() function converts a string containing a number into an integer.",
      "hints": ["Remember to enclose the string in quotes", "Use int() for integer conversion"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "Which of the following will correctly convert the integer 3 to a float in Python?",
      "options": [
        "float(3)",
        "str(3)",
        "int(3)"
      ],
      "answer": 0,
      "explanation": "float(3) converts an integer to a floating-point number.",
      "hints": ["Use float() to convert to decimal", "int() keeps it an integer"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "You can convert a string 'True' directly to a boolean in Python.",
      "answer": false,
      "explanation": "The string 'True' is not automatically converted to a boolean; use bool() and evaluate conditions carefully.",
      "hints": ["Strings are not automatically booleans", "Check how bool() works"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a Python statement that converts 100 to a string.",
      "words": ["str", "100", "()"],
      "answer": "str(100)",
      "explanation": "str() converts numbers to strings, allowing text operations.",
      "hints": ["Use str() to create a string", "Parentheses are required"]
    },
    {
      "id": 5,
      "type": "multiple-choice",
      "question": "What will the following Python code output?",
      "code": "x = '3.14'\ny = float(x)\nprint(y)",
      "options": ["3.14", "3", "string"],
      "answer": 0,
      "explanation": "float() converts the string '3.14' into a floating-point number.",
      "hints": ["Look at the conversion type", "float() preserves decimals"]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the code with its output.",
      "code-output-pairs": {
        "int(\"12\")": "12",
        "float(\"12.34\")": "12.34",
        "str(123)": "'123'"
      },
      "answer": {
        "int(\"12\")": "12",
        "float(\"12.34\")": "12.34",
        "str(123)": "'123'"
      },
      "explanation": "Each conversion function transforms data types appropriately.",
      "hints": ["Match conversion functions with expected outputs"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following statements will correctly convert a string to a number? (Select all that apply)",
      "options": [
        "int(\"45\")",
        "float(\"45.67\")",
        "str(45)"
      ],
      "answer": [0, 1],
      "explanation": "int() and float() correctly convert numeric strings to numbers, while str() converts numbers to strings.",
      "hints": ["Identify numeric and string conversions", "Check function purposes"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the steps in the correct order to convert a string to an integer and then multiply it by 2.",
      "steps": [
        "Convert the string to an integer using int()",
        "Multiply the integer by 2",
        "Print the result"
      ],
      "answer": [0, 1, 2],
      "explanation": "First, convert the string to an integer, then perform multiplication, and finally print the result.",
      "hints": ["Start with type conversion", "Operations follow conversion"]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?",
      "code": "x = 'Hello'\ny = int(x)",
      "options": [
        "x is a string, so it cannot be converted to an integer.",
        "int() cannot convert a string to a number.",
        "There is no error."
      ],
      "answer": 0,
      "explanation": "int() only works on strings that contain numbers, not general text.",
      "hints": ["Check the input value", "Strings must represent numbers for conversion"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to display the following output: 3.14",
      "code": "x = '3.14'\ny = ___(x)",
      "answer": "float",
      "explanation": "float() converts a string containing a decimal number into a float.",
      "hints": ["Use float() to get decimals", "Think about numerical conversion"]
    }
  ]
}







{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Variable Naming Conventions and Dynamic Typing",
  "description": "Learn the rules for naming variables and Python's dynamic typing system.",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to create a valid variable name in Python.",
      "code": "___ = 10",
      "answer": "age",
      "explanation": "Variable names must start with a letter or an underscore and should be descriptive.",
      "hints": ["Variable names cannot start with a number", "Use lowercase letters and underscores"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "Which of the following is a valid variable name in Python?",
      "options": ["1st_number", "first_number", "first-number"],
      "answer": 1,
      "explanation": "Python variable names can contain letters, numbers, and underscores but cannot start with a number.",
      "hints": ["Numbers cannot be at the start", "Hyphens are not allowed in variable names"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "In Python, variable names can start with a number.",
      "answer": false,
      "explanation": "Python variable names must begin with a letter or an underscore.",
      "hints": ["Check Python's naming rules"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a valid Python variable name.",
      "words": ["number", "first", "_"],
      "answer": "first_number",
      "explanation": "Python variables should use underscores instead of spaces or hyphens.",
      "hints": ["Underscores are used to separate words"]
    },
    {
      "id": 5,
      "type": "multiple-choice",
      "question": "What will the following Python code output?",
      "code": "x = 5\nx = \"Hello\"\nprint(x)",
      "options": ["5", "Hello", "x"],
      "answer": 1,
      "explanation": "Python allows dynamic typing, meaning a variable's type can change at runtime.",
      "hints": ["The last assignment determines the value"]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the variable name with its valid use:",
      "code-output-pairs": {
        "_age": "Valid",
        "age_1": "Valid",
        "1age": "Invalid"
      },
      "answer": {
        "_age": "Valid",
        "age_1": "Valid",
        "1age": "Invalid"
      },
      "explanation": "Variable names cannot start with a number but can start with an underscore.",
      "hints": ["Numbers cannot be at the start"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following are valid variable names in Python? (Select all that apply)",
      "options": ["age_2", "2age", "_is_active"],
      "answer": [0, 2],
      "explanation": "Valid variable names must not start with a number but can start with an underscore.",
      "hints": ["Check Python's variable naming rules"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the steps in the correct order to define a valid variable in Python:",
      "steps": ["Choose a name that follows the rules", "Assign a value to the variable", "Use the variable in your program"],
      "answer": [0, 1, 2],
      "explanation": "Variable declaration must follow Python's naming conventions before assignment and usage.",
      "hints": ["Naming comes first"]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?",
      "code": "2variable = \"test\"",
      "options": ["Variables cannot start with a number", "The name 2variable is too long", "There is no error"],
      "answer": 0,
      "explanation": "Python does not allow variable names to start with a number.",
      "hints": ["Check the first character of the variable name"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to create a valid variable assignment:",
      "code": "___ = \"Hello\"",
      "answer": "greeting",
      "explanation": "Variable names should be descriptive and follow Python's naming conventions.",
      "hints": ["Choose a meaningful name"]
    }
  ],
  "flashcards": [
    {"front": "What are the rules for naming variables in Python?", "back": "Variable names must start with a letter or an underscore and can contain letters, numbers, and underscores."},
    {"front": "Can a variable name start with a number?", "back": "No, variable names cannot start with a number."},
    {"front": "What does dynamically typed mean in Python?", "back": "It means that variables can change types at runtime without explicit declaration."},
    {"front": "Give an example of a valid Python variable name.", "back": "Example: first_name, _counter, age1."},
    {"front": "Why should variable names be descriptive?", "back": "Descriptive names make code more readable and maintainable."},
    {"front": "What is a common mistake when naming variables?", "back": "Using reserved keywords, starting with a number, or including special characters like hyphens."}
  ]
}






{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Arithmetic Operators",
  "description": "Learn how to use arithmetic operators in Python.",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to calculate the sum of `a` and `b` in Python.",
      "code": "a = 5\nb = 3\nresult = a ___ b",
      "answer": "+",
      "explanation": "The `+` operator is used for addition in Python.",
      "hints": ["Use the addition operator", "The operator should be between `a` and `b`"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "What does the `//` operator do in Python?",
      "options": [
        "Divides and returns a floating-point number",
        "Divides and returns an integer (floor division)",
        "Returns the remainder of division"
      ],
      "answer": 1,
      "explanation": "The `//` operator performs floor division, returning an integer.",
      "hints": ["It discards the decimal part", "It performs integer division"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "The `%` operator in Python returns the remainder of a division.",
      "answer": true,
      "explanation": "The `%` operator calculates the remainder of the division.",
      "hints": ["Think about modular arithmetic", "It does not return the quotient"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a valid expression for modulus in Python:",
      "words": ["10", "%", "3"],
      "answer": "10 % 3",
      "explanation": "`%` is used for modulus operation, which returns the remainder.",
      "hints": ["Place `%` between the numbers", "It calculates the remainder"]
    },
    {
      "id": 5,
      "type": "multiple-choice",
      "question": "What will the following Python code output?",
      "code": "a = 10\nb = 4\nresult = a // b\nprint(result)",
      "options": [
        "2",
        "2.5",
        "4"
      ],
      "answer": 0,
      "explanation": "`//` performs floor division, discarding the decimal part.",
      "hints": ["It returns an integer", "Think about how division works"]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the arithmetic operator with its operation:",
      "code-output-pairs": {
        "+": "Addition",
        "-": "Subtraction",
        "%": "Modulus (remainder)",
        "//": "Integer division (floor division)"
      },
      "answer": {
        "+": "Addition",
        "-": "Subtraction",
        "%": "Modulus (remainder)",
        "//": "Integer division (floor division)"
      },
      "explanation": "Each operator corresponds to a specific arithmetic operation.",
      "hints": ["Match based on their function", "Think of basic math operations"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following are valid arithmetic operators in Python? (Select all that apply)",
      "options": [
        "+",
        "==",
        "*"
      ],
      "answer": [0, 2],
      "explanation": "`+` and `*` are arithmetic operators, while `==` is a comparison operator.",
      "hints": ["Check if the operator performs a mathematical operation"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the following operators in order of precedence (highest to lowest):",
      "steps": [
        "*",
        "+",
        "/",
        "-"
      ],
      "answer": [2, 0, 1, 3],
      "explanation": "Multiplication and division have higher precedence than addition and subtraction.",
      "hints": ["Multiplication and division come first", "Addition and subtraction come later"]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?",
      "code": "a = 5\nb = 0\nresult = a / b",
      "options": [
        "The division by zero will result in an error",
        "The variable `b` cannot be used as the divisor",
        "The `/` operator should be replaced with `//`"
      ],
      "answer": 0,
      "explanation": "Dividing by zero in Python results in a runtime error.",
      "hints": ["Check the denominator", "Zero cannot be used in division"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to calculate the remainder of division between `a` and `b`:",
      "code": "a = 10\nb = 3\nresult = a ___ b",
      "answer": "%",
      "explanation": "`%` is the modulus operator, which returns the remainder.",
      "hints": ["Use the operator for modulus", "It calculates the remainder"]
    }
  ],
  "flashcards": [
    {
      "front": "What are arithmetic operators in Python?",
      "back": "Arithmetic operators perform basic mathematical operations like addition, subtraction, multiplication, and division."
    },
    {
      "front": "What does the `//` operator do?",
      "back": "The `//` operator performs floor division, returning the quotient without the decimal part."
    },
    {
      "front": "What does the `%` operator return?",
      "back": "The `%` operator returns the remainder of a division operation."
    },
    {
      "front": "What is operator precedence?",
      "back": "Operator precedence determines the order in which operations are executed in an expression."
    }
  ]
}






{
  "phase": "Phase 1: Python Basics",
  "topic": "Comparison Operators",
  "subtopic": "Comparison operators: ==, !=, >, <, >=, <=",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to compare if `a` is greater than `b`.",
      "code": "a = 5\nb = 3\nresult = a ___ b",
      "answer": ">",
      "explanation": "The `>` operator is used to check if `a` is greater than `b`.",
      "hints": ["The `>` operator compares the values"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "What does the `!=` operator check in Python?",
      "options": [
        "a) Checks if two values are equal",
        "b) Checks if two values are not equal",
        "c) Compares the size of two values"
      ],
      "answer": 1,
      "explanation": "The `!=` operator checks if two values are not equal.",
      "hints": ["The `!=` operator returns `True` if the values are not the same"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "The `>=` operator checks if one value is greater than or equal to another.",
      "answer": true,
      "explanation": "The `>=` operator is used for checking if a value is greater than or equal to another value.",
      "hints": ["Remember the `>=` operator checks both greater than and equality"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a valid Python comparison expression:",
      "words": ["5", ">=", "3"],
      "answer": "5 >= 3",
      "explanation": "The correct order forms a valid Python comparison expression.",
      "hints": ["Start with the number 5, then the comparison operator, followed by 3"]
    },
    {
      "id": 5,
      "type": "translate-code",
      "question": "What will the following Python code output?\n\n```python\na = 5\nb = 3\nresult = a > b\nprint(result)\n```",
      "options": [
        "a) True",
        "b) False",
        "c) 5"
      ],
      "answer": 0,
      "explanation": "The expression `a > b` evaluates to `True` because 5 is greater than 3.",
      "hints": ["Check the comparison `a > b`, which will return `True`."]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the comparison operator with its function.",
      "code-output-pairs": {
        "==": "Equal to",
        "!=": "Not equal to",
        ">": "Greater than",
        "<": "Less than"
      },
      "answer": {
        "==": "Equal to",
        "!=": "Not equal to",
        ">": "Greater than",
        "<": "Less than"
      },
      "explanation": "Each comparison operator checks for a specific condition between two values.",
      "hints": ["Each operator compares values and returns either `True` or `False`"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following are valid comparison operators in Python? (Select all that apply)",
      "options": [
        "a) `==`",
        "b) `=`",
        "c) `!=`"
      ],
      "answer": [0, 2],
      "explanation": "`==` and `!=` are valid comparison operators. The `=` operator is for assignment, not comparison.",
      "hints": ["Look for operators used to compare values, not assign them"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the comparison operators in the correct order of precedence:",
      "steps": [
        ">",
        "<=",
        "==",
        "!="
      ],
      "answer": [2, 3, 0, 1],
      "explanation": "Comparison operators have equal precedence, and are evaluated from left to right.",
      "hints": ["All comparison operators have the same level of precedence."]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?\n\n```python\na = 5\nb = 3\nresult = a = b\n```",
      "options": [
        "a) The `=` operator should be `==` for comparison",
        "b) `a = b` is a valid assignment, not a comparison",
        "c) The `=` operator is used incorrectly"
      ],
      "answer": 0,
      "explanation": "The `=` operator is used for assignment, while `==` is used for comparison.",
      "hints": ["Look at the operator used for comparison"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to compare if `a` is equal to `b`:\n\n**Output**: `True`",
      "code": "a = 5\nb = 5\nresult = a ___ b",
      "answer": "==",
      "explanation": "The `==` operator is used to check if two values are equal.",
      "hints": ["The comparison operator `==` checks for equality."]
    }
  ],
  "flashcards": [
    {
      "front": "What is the purpose of comparison operators in Python?",
      "back": "Comparison operators are used to compare two values and return a Boolean result (`True` or `False`)."
    },
    {
      "front": "What is the difference between `=` and `==`?",
      "back": "`=` is used for assignment, while `==` is used to compare two values for equality."
    },
    {
      "front": "How does the `!=` operator work?",
      "back": "`!=` checks if two values are not equal and returns `True` if they are different."
    },
    {
      "front": "When would you use the `>=` operator?",
      "back": "`>=` is used to check if one value is greater than or equal to another."
    },
    {
      "front": "What is the result of `5 < 10`?",
      "back": "`True`, because 5 is less than 10."
    }
  ]
}







{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Logical operators: `and`, `or`, `not`",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to check if both `a` is greater than 5 and `b` is less than 10.",
      "code": "a = 6\nb = 8\nresult = a ___ 5 and b ___ 10",
      "answer": [">", "<"],
      "explanation": "The 'and' operator checks if both conditions are True, while the comparison operators check the respective conditions.",
      "hints": ["Use 'and' to combine conditions", "Use comparison operators to check numeric conditions"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "What will the following code output?",
      "code": "a = True\nb = False\nresult = a and b\nprint(result)",
      "options": [
        "a) True",
        "b) False",
        "c) None"
      ],
      "answer": 1,
      "explanation": "'and' returns True only if both conditions are True. Since 'a' is True and 'b' is False, the result is False.",
      "hints": ["'and' requires both conditions to be True", "One False value makes the whole condition False"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "The `not` operator in Python negates the truth value of a Boolean expression.",
      "answer": true,
      "explanation": "The `not` operator inverts the truth value of the Boolean expression.",
      "hints": ["'not' flips the truth value", "It turns True into False and vice versa"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a valid Python expression using logical operators.",
      "words": ["a", "True", "not", "b", "=="],
      "answer": "a == not b",
      "explanation": "The correct order forms a valid comparison using the 'not' operator.",
      "hints": ["The 'not' operator negates the value of 'b'", "Make sure to use '==' for comparison"]
    },
    {
      "id": 5,
      "type": "multiple-choice",
      "question": "What will the following Python code output?",
      "code": "a = True\nb = False\nresult = a or b\nprint(result)",
      "options": [
        "a) True",
        "b) False",
        "c) None"
      ],
      "answer": 0,
      "explanation": "'or' returns True if at least one condition is True. Since 'a' is True, the result is True.",
      "hints": ["'or' returns True if any condition is True", "Only False results in False with 'or'"]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the operator with its function.",
      "code-output-pairs": {
        "and": "Returns True only if both conditions are True",
        "or": "Returns True if at least one condition is True",
        "not": "Negates the value"
      },
      "answer": {
        "and": "Returns True only if both conditions are True",
        "or": "Returns True if at least one condition is True",
        "not": "Negates the value"
      },
      "explanation": "Each logical operator has its specific function in conditional checks.",
      "hints": ["'and' checks both conditions", "'or' checks if one condition is True", "'not' negates a condition"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following are valid logical operators in Python? (Select all that apply)",
      "options": [
        "a) and",
        "b) &",
        "c) or"
      ],
      "answer": [0, 2],
      "explanation": "'and' and 'or' are valid logical operators. '&' is a bitwise operator, not a logical operator.",
      "hints": ["'and' and 'or' are logical operators", "The '&' operator works with bits, not logical conditions"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the logical operators by precedence (highest to lowest):",
      "steps": [
        "not",
        "and",
        "or"
      ],
      "answer": [0, 1, 2],
      "explanation": "'not' has the highest precedence, followed by 'and', and 'or' has the lowest.",
      "hints": ["'not' has the highest precedence", "'and' comes next, then 'or'"]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?",
      "code": "a = True\nb = False\nif a or not b:\n    print('True')",
      "options": [
        "a) The code is correct.",
        "b) The `not` operator is used incorrectly.",
        "c) The `or` operator is invalid."
      ],
      "answer": 0,
      "explanation": "The code is correct. The 'if' statement checks if 'a' is True or 'b' is False, and prints 'True'.",
      "hints": ["The syntax and operators are correct", "The condition will evaluate as True"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to print `True` if `a` is True or `b` is False.",
      "code": "a = True\nb = False\nresult = a ___ b",
      "answer": "or",
      "explanation": "'or' will return True if either condition is True.",
      "hints": ["Use 'or' to check if at least one condition is True", "'or' will return True if either 'a' or 'b' is True"]
    }
  ],
  "flashcards": [
    {
      "front": "What is the purpose of the 'and' operator?",
      "back": "'and' returns True only if both conditions are True."
    },
    {
      "front": "What is the purpose of the 'or' operator?",
      "back": "'or' returns True if at least one condition is True."
    },
    {
      "front": "What does the 'not' operator do?",
      "back": "'not' negates the truth value of a Boolean expression."
    },
    {
      "front": "What is the key concept of logical operators?",
      "back": "Logical operators combine conditional statements to form complex expressions."
    },
    {
      "front": "What is a common mistake when using logical operators?",
      "back": "Confusing 'and' with 'or' or misusing precedence."
    },
    {
      "front": "Why is it important to understand logical operators?",
      "back": "They are essential for controlling program flow and decision-making processes."
    }
  ]
}






{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Assignment operators: `=`, `+=`, `=`",
  "description": "Learn how to use assignment operators to modify variable values in Python.",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to increment the value of `x` by 5.",
      "code": "x = 10\nx ___ 5",
      "answer": "+=",
      "explanation": "The `+=` operator increments the value of the variable by the specified amount.",
      "hints": ["The operator adds the value on the right to the variable on the left"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "What does the `+=` operator do in Python?",
      "options": [
        "a) Assigns the value on the right to the variable on the left",
        "b) Adds the value on the right to the variable on the left and assigns the result",
        "c) Subtracts the value on the right from the variable on the left"
      ],
      "answer": 1,
      "explanation": "The `+=` operator adds the value on the right to the variable on the left and assigns the result.",
      "hints": ["It combines assignment and addition in one step."]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "The `=` operator in Python is used for assignment, not comparison.",
      "answer": true,
      "explanation": "The `=` operator is used for assigning a value to a variable, while `==` is used for comparison.",
      "hints": ["Remember that `=` is for assigning values."]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a valid assignment expression:",
      "words": ["+=", "5", "x", "="],
      "answer": "x += 5",
      "explanation": "The correct order is to use `+=` to add 5 to the variable `x`.",
      "hints": ["Start with the variable `x`."]
    },
    {
      "id": 5,
      "type": "translate-code",
      "question": "What will the following Python code output?",
      "code": "x = 5\nx += 3\nprint(x)",
      "options": [
        "a) 3",
        "b) 5",
        "c) 8"
      ],
      "answer": 2,
      "explanation": "The `+=` operator adds 3 to 5, so the result is 8.",
      "hints": ["Look at how `+=` is modifying the value of `x`."]
    },
    {
      "id": 6,
      "type": "match-operator-function",
      "question": "Match the assignment operator with its action:",
      "operator-function-pairs": {
        "1": "b) Assigns the right value to the variable",
        "2": "a) Adds the value to the variable",
        "3": "c) Subtracts the value from the variable"
      },
      "answer": {
        "1": "b) Assigns the right value to the variable",
        "2": "a) Adds the value to the variable",
        "3": "c) Subtracts the value from the variable"
      },
      "explanation": "Each operator performs a specific action on the variable it is applied to.",
      "hints": ["Look closely at the action of each operator."]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following are valid assignment operators in Python? (Select all that apply)",
      "options": [
        "a) =",
        "b) ==",
        "c) +="
      ],
      "answer": [0, 2],
      "explanation": "`=` and `+=` are valid assignment operators, while `==` is a comparison operator.",
      "hints": ["Assignment operators modify variable values."]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the assignment operators by precedence (highest to lowest):",
      "steps": [
        "1. =",
        "2. +=",
        "3. ="
      ],
      "answer": [0, 1, 2],
      "explanation": "The assignment operator `=` has the highest precedence.",
      "hints": ["Think about the order of operations for assignment."]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?",
      "code": "x = 5\nx + = 2",
      "options": [
        "a) There should be no space between `+` and `=`",
        "b) The `+` operator is used incorrectly.",
        "c) The code is correct."
      ],
      "answer": 0,
      "explanation": "There should be no space between `+` and `=` in the `+=` operator.",
      "hints": ["Check for syntax errors with the operator."]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to assign the sum of `a` and `b` to `result`:",
      "code": "a = 3\nb = 4\nresult ___ a + b",
      "answer": "=",
      "explanation": "The `=` operator is used to assign the result of `a + b` to `result`.",
      "hints": ["Think about assignment syntax."]
    }
  ],
  "flashcards": [
    {
      "front": "What does the `+=` operator do in Python?",
      "back": "The `+=` operator adds the value on the right to the variable on the left and assigns the result."
    },
    {
      "front": "What is the purpose of the `=` operator in Python?",
      "back": "The `=` operator assigns a value to a variable."
    },
    {
      "front": "What is a common mistake when using assignment operators?",
      "back": "Forgetting to use the correct operator, such as writing `x + = 5` instead of `x += 5`."
    },
    {
      "front": "How does the `+=` operator improve code readability?",
      "back": "It allows for concise code by combining addition and assignment in one step."
    },
    {
      "front": "What is the difference between `=` and `==` in Python?",
      "back": "`=` is used for assignment, while `==` is used for comparison."
    }
  ]
}


BITWISE OPERATOR 



{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Bitwise operators (optional for beginners)",
  "description": "Learn how to manipulate individual bits of integers using bitwise operators.",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to perform a bitwise AND operation on `a` and `b`.",
      "code": "a = 5\nb = 3\nresult = a ___ b",
      "answer": "&",
      "explanation": "The `&` operator performs a bitwise AND operation.",
      "hints": ["Look for the bitwise AND operator", "This operator compares bits at corresponding positions"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "What does the `<<` operator do in Python?",
      "options": [
        "a) Performs a bitwise left shift",
        "b) Performs a bitwise right shift",
        "c) Performs a bitwise AND"
      ],
      "answer": 0,
      "explanation": "The `<<` operator shifts the bits of the number to the left.",
      "hints": ["Think about shifting bits in binary form", "This operator increases the value"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "The `|` operator in Python performs a bitwise OR operation.",
      "answer": true,
      "explanation": "The `|` operator performs a bitwise OR operation.",
      "hints": ["Consider how bits are combined with OR", "This operator sets bits to 1 when either of them is 1"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a valid Python expression using bitwise operators:",
      "words": ["<<", "a", "2"],
      "answer": "a << 2",
      "explanation": "The `<<` operator shifts the bits of `a` left by 2 positions.",
      "hints": ["Shift bits of `a` to the left", "You need to specify the number of positions to shift"]
    },
    {
      "id": 5,
      "type": "translate-code",
      "question": "What will the following Python code output?\n\n```python\na = 4\nb = 2\nresult = a & b\nprint(result)\n```",
      "options": [
        "a) 2",
        "b) 0",
        "c) 1"
      ],
      "answer": 1,
      "explanation": "The `&` operator performs a bitwise AND operation. 4 and 2 in binary are 0100 and 0010, respectively. The result is 0000, which equals 0.",
      "hints": ["Look at the binary representations of the numbers", "The `&` operator keeps only bits that are 1 in both numbers"]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the bitwise operator with its function:",
      "operator-function-pairs": {
        "&": "Performs bitwise AND",
        "|": "Performs bitwise OR",
        "<<": "Left shift bits"
      },
      "answer": {
        "&": "Performs bitwise AND",
        "|": "Performs bitwise OR",
        "<<": "Left shift bits"
      },
      "explanation": "Each bitwise operator performs a specific operation on the bits of the numbers.",
      "hints": ["Think about how the operators interact with the bits of numbers"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following are valid bitwise operators in Python? (Select all that apply)",
      "options": [
        "a) &",
        "b) |",
        "c) <<"
      ],
      "answer": [0, 1, 2],
      "explanation": "The valid bitwise operators in Python are `&`, `|`, and `<<`.",
      "hints": ["Look for operators that manipulate bits directly", "Other operators like `+` or `-` are not bitwise operators"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the following bitwise operators by precedence (highest to lowest):\n\n1. `&`\n2. `<<`\n3. `|`",
      "answer": [0, 2, 1],
      "explanation": "`&` has higher precedence than `|`, and `<<` has lower precedence than both.",
      "hints": ["Consider the operator precedence rules in Python", "Look up how operators are evaluated in Python"]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?\n\n```python\na = 4\nb = 2\nresult = a < < b\n```",
      "options": [
        "a) The operator `<<` should not have a space.",
        "b) The `<<` operator is incorrect.",
        "c) The code is correct."
      ],
      "answer": 0,
      "explanation": "There should be no space between the `<<` operator.",
      "hints": ["Look for unnecessary spaces in the operator", "Bitwise operators should not have spaces between symbols"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to perform a bitwise OR operation on `a` and `b`:\n\n- `a = 5`\n- `b = 3`\n- `result = a ___ b`",
      "answer": "|",
      "explanation": "The `|` operator performs a bitwise OR operation.",
      "hints": ["Look for the OR operator in bitwise operations", "This operation combines the bits of `a` and `b`"]
    }
  ],
  "flashcards": [
    {
      "front": "What does the `&` operator do in Python?",
      "back": "The `&` operator performs a bitwise AND operation, keeping only bits that are 1 in both numbers."
    },
    {
      "front": "What is the function of the `<<` operator?",
      "back": "The `<<` operator performs a left shift, shifting the bits of the number to the left."
    },
    {
      "front": "What does the `|` operator do in Python?",
      "back": "The `|` operator performs a bitwise OR operation, setting bits to 1 when either of the numbers has a 1 in that position."
    },
    {
      "front": "What is a common mistake when using bitwise operators?",
      "back": "Confusing bitwise operators with logical operators, like `and` or `or`."
    },
    {
      "front": "Why are bitwise operators used?",
      "back": "Bitwise operators are used to manipulate individual bits of integers, which is useful in low-level programming, encryption, and optimization."
    },
    {
      "front": "What is a key concept of bitwise operators?",
      "back": "Bitwise operators work at the binary level and directly manipulate bits within integers."
    }
  ]
}






{
  "phase": "Phase 1: Python Basics",
  "topic": "Introduction to Python",
  "subtopic": "Conditionals: if, elif, else",
  "description": "Learn how to use conditional statements in Python to control program flow.",
  "questions": [
    {
      "id": 1,
      "type": "fill-blank",
      "question": "Fill in the blank to check if `a` is greater than `b` and print \"a is greater\" if the condition is true.",
      "code": "a = 10\nb = 5\nif a ___ b:\n    print(\"a is greater\")",
      "answer": ">",
      "explanation": "The '>' operator checks if 'a' is greater than 'b'.",
      "hints": ["Use a comparison operator", "Check the relationship between a and b"]
    },
    {
      "id": 2,
      "type": "multiple-choice",
      "question": "What will the following code output?",
      "code": "x = 5\nif x > 3:\n    print(\"Greater than 3\")\nelse:\n    print(\"Less than or equal to 3\")",
      "options": [
        "Greater than 3",
        "Less than or equal to 3",
        "No output"
      ],
      "answer": 0,
      "explanation": "Since 5 is greater than 3, the output will be 'Greater than 3'.",
      "hints": ["Look at the condition and the value of 'x'"]
    },
    {
      "id": 3,
      "type": "true-false",
      "question": "The `elif` statement is used to check for multiple conditions if the previous `if` or `elif` conditions were false.",
      "answer": true,
      "explanation": "`elif` allows you to check another condition if previous conditions were false.",
      "hints": ["Think of `elif` as a backup check"]
    },
    {
      "id": 4,
      "type": "word-scramble",
      "question": "Unscramble the words to create a valid Python `if` statement that checks if `x` is less than `10`.",
      "words": ["if", "x", "<", "10", ":"],
      "answer": "if x < 10:",
      "explanation": "The correct order forms a valid condition for checking if 'x' is less than 10.",
      "hints": ["Start with 'if'", "Use '<' to compare"]
    },
    {
      "id": 5,
      "type": "multiple-choice",
      "question": "What will the following Python code output?",
      "code": "age = 20\nif age < 18:\n    print(\"Minor\")\nelse:\n    print(\"Adult\")",
      "options": [
        "Minor",
        "Adult",
        "No output"
      ],
      "answer": 1,
      "explanation": "Since 20 is not less than 18, the output will be 'Adult'.",
      "hints": ["Check the value of 'age'"]
    },
    {
      "id": 6,
      "type": "match-output",
      "question": "Match the code with its output.",
      "code-output-pairs": {
        "if 5 > 3: print(\"True\")": "True",
        "if 3 > 5: print(\"True\")": "No output"
      },
      "answer": {
        "if 5 > 3: print(\"True\")": "True",
        "if 3 > 5: print(\"True\")": "No output"
      },
      "explanation": "The first condition is true, so it prints 'True', while the second condition is false, so no output occurs.",
      "hints": ["Check which conditions evaluate to true"]
    },
    {
      "id": 7,
      "type": "multiple-selection",
      "question": "Which of the following are valid conditionals in Python? (Select all that apply)",
      "options": [
        "if",
        "check",
        "elif"
      ],
      "answer": [0, 2],
      "explanation": "`if` and `elif` are valid conditionals. 'check' is not a valid keyword in Python.",
      "hints": ["Look for Python keywords for conditional statements"]
    },
    {
      "id": 8,
      "type": "ordering",
      "question": "Arrange the following conditionals in the correct order of execution:",
      "steps": [
        "if",
        "elif",
        "else"
      ],
      "answer": [0, 1, 2],
      "explanation": "The correct order of execution is first `if`, then `elif`, and finally `else` if all previous conditions are false.",
      "hints": ["Conditionals are checked in sequence"]
    },
    {
      "id": 9,
      "type": "code-correction",
      "question": "What is wrong with this Python code?",
      "code": "x = 10\nif x > 5\n    print(\"Greater\")",
      "options": [
        "Missing colon after the `if` statement",
        "Incorrect variable name",
        "The `print` statement is incorrect"
      ],
      "answer": 0,
      "explanation": "The `if` statement is missing a colon at the end.",
      "hints": ["Remember to use a colon after 'if'"]
    },
    {
      "id": 10,
      "type": "fill-blank",
      "question": "Complete the code to print \"Yes\" if `x` is equal to `5`:",
      "code": "x = 5\nif x ___ 5:\n    print(\"Yes\")",
      "answer": "==",
      "explanation": "The '==' operator checks if 'x' is equal to 5.",
      "hints": ["Use the equality operator '=='"]
    }
  ],
  "flashcards": [
    {
      "front": "What is the purpose of conditionals in Python?",
      "back": "Conditionals allow you to make decisions in your program based on specific conditions."
    },
    {
      "front": "What is the correct syntax for an if statement?",
      "back": "if condition: - where 'condition' is a boolean expression."
    },
    {
      "front": "What is the key difference between if, elif, and else?",
      "back": "'if' checks the initial condition, 'elif' checks additional conditions, and 'else' runs when all other conditions are false."
    },
    {
      "front": "What common mistake occurs when using if statements?",
      "back": "Forgetting to add a colon (':') at the end of the condition."
    },
    {
      "front": "Why is it important to use elif?",
      "back": "'elif' allows for checking multiple conditions after the initial 'if' statement."
    }
  ]
}






