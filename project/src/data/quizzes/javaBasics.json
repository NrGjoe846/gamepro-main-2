[
  {
    "phase": "Phase 1: Java Basics and Core Concepts",
    "topics": [
      {
        "topic": "1. Introduction to Java Programming",
        "subtopics": [
          { "subtopic": "Installing Java (JDK, JRE)", "questionsData": [{
      "type": "fill",
      "question": "Python is an example of a __________ language, meaning it is executed line-by-line by an interpreter.",
      "answer": "interpreted",
      "component": "FillInTheBlank"
    },
    {
      "type": "multiple-choice",
      "question": "Which of the following is true about Python compared to compiled languages?",
      "options": [
        "Python code is translated into machine code before execution.",
        "Python code is executed line-by-line by an interpreter.",
        "Python requires a separate compilation step to run."
      ],
      "answer": "Python code is executed line-by-line by an interpreter.",
      "component": "MultipleChoiceQuestion"
    },
    {
      "type": "true-false",
      "question": "Python is a compiled language, meaning the entire program is converted into machine code before execution.",
      "answer": "False",
      "component": "TrueFalseQuestion"
    },
    {
      "type": "unscramble",
      "question": "Unscramble the words to form a correct statement about Python's execution:",
      "options": ["line-by-line", "executed", "Python", "is", "code", "by", "an", "interpreter"],
      "answer": ["Python", "code", "is", "executed", "line-by-line", "by", "an", "interpreter"],
      "component": "DragDropQuestion"
    },
    {
      "type": "multiple-choice",
      "question": "What is the main difference between Python and a compiled language like C++?",
      "options": [
        "Python requires an interpreter to run.",
        "Python requires a compiler to run.",
        "Python does not need any translation step."
      ],
      "answer": "Python requires an interpreter to run.",
      "component": "MultipleChoiceQuestion"
    },
    {
      "type": "match",
      "question": "Match the language to whether it uses an interpreter or a compiler for execution:",
      "options": [
        { "term": "Python", "match": "Interpreter" },
        { "term": "C++", "match": "Compiler" }
      ],
      "component": "MatchQuestion"
    },
    {
      "type": "multiple-selection",
      "question": "Which of the following are advantages of interpreted languages like Python? (Select all that apply)",
      "options": [
        "Easier to debug",
        "Faster execution",
        "Portability across different platforms"
      ],
      "answer": ["Easier to debug", "Portability across different platforms"],
      "component": "MultipleSelectionQuestion"
    },
    {
      "type": "order",
      "question": "Arrange the steps in the correct order for Python execution:",
      "options": [
        "Python code is written and saved in a .py file.",
        "The interpreter reads and executes the code line-by-line.",
        "The output is displayed on the screen."
      ],
      "correctOrder": [
        "Python code is written and saved in a .py file.",
        "The interpreter reads and executes the code line-by-line.",
        "The output is displayed on the screen."
      ],
      "component": "OrderQuestion"
    },
    {
      "type": "code-correction",
      "question": "What is wrong with this statement about Python?\n\nPython code is compiled into machine code before execution.",
      "options": [
        "Python code is not compiled.",
        "Python code is compiled into bytecode.",
        "Python code is executed by an interpreter."
      ],
      "answer": "Python code is not compiled.",
      "component": "CodeCorrectionQuestion"
    },
    {
      "type": "fill",
      "question": "Complete the code to demonstrate Python's execution process.\n\nOutput: `Python is an interpreted language!`",
      "answer": "print(\"Python is an interpreted language!\")",
      "component": "FillInTheBlank"
    }] },
          { "subtopic": "Setting up the IDE (IntelliJ IDEA, Eclipse, or VS Code)", "questionsData": [] },
          { "subtopic": "Writing your first Java program: Hello, World!", "questionsData": [] },
          { "subtopic": "Java syntax, keywords, and comments", "questionsData": [] },
          { "subtopic": "Understanding the Java Virtual Machine (JVM)", "questionsData": [] }
        ]
      },
      {
        "topic": "2. Basic Data Types and Variables",
        "subtopics": [
          { "subtopic": "Primitive data types: int, double, char, boolean", "questionsData": [] },
          { "subtopic": "Variables and constants (final keyword)", "questionsData": [] },
          { "subtopic": "Type casting: implicit and explicit", "questionsData": [] },
          { "subtopic": "Variable naming conventions", "questionsData": [] }
        ]
      },
      {
        "topic": "3. Operators and Expressions",
        "subtopics": [
          { "subtopic": "Arithmetic operators: +, -, *, /, %", "questionsData": [] },
          { "subtopic": "Comparison operators: ==, !=, >, <, >=, <=", "questionsData": [] },
          { "subtopic": "Logical operators: &&, ||, !", "questionsData": [] },
          { "subtopic": "Assignment operators: =, +=, -=, *=, /=", "questionsData": [] },
          { "subtopic": "Ternary operator: ? :", "questionsData": [] }
        ]
      },
      {
        "topic": "4. Control Flow: Conditionals and Loops",
        "subtopics": [
          { "subtopic": "Conditionals: if, else if, else", "questionsData": [] },
          { "subtopic": "Switch-case statements", "questionsData": [] },
          { "subtopic": "for loops", "questionsData": [] },
          { "subtopic": "while and do-while loops", "questionsData": [] },
          { "subtopic": "Loop control statements: break, continue", "questionsData": [] }
        ]
      },
      {
        "topic": "5. Functions (Methods)",
        "subtopics": [
          { "subtopic": "Defining methods using public, private, static", "questionsData": [] },
          { "subtopic": "Method parameters and return values", "questionsData": [] },
          { "subtopic": "Method overloading", "questionsData": [] },
          { "subtopic": "Recursion (optional for beginners)", "questionsData": [] }
        ]
      },
      {
        "topic": "6. Basic Input and Output",
        "subtopics": [
          { "subtopic": "User input using Scanner class", "questionsData": [] },
          { "subtopic": "Output using System.out.println()", "questionsData": [] },
          { "subtopic": "Formatting output with printf()", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 2: Object-Oriented Programming",
    "topics": [
      {
        "topic": "7. Introduction to OOP",
        "subtopics": [
          { "subtopic": "Classes and objects", "questionsData": [] },
          { "subtopic": "Instance variables and methods", "questionsData": [] },
          { "subtopic": "Constructors: default and parameterized", "questionsData": [] },
          { "subtopic": "this keyword", "questionsData": [] }
        ]
      },
      {
        "topic": "8. Encapsulation and Access Modifiers",
        "subtopics": [
          { "subtopic": "Private vs public access modifiers", "questionsData": [] },
          { "subtopic": "Getters and setters", "questionsData": [] },
          { "subtopic": "Encapsulation principles", "questionsData": [] }
        ]
      },
      {
        "topic": "9. Inheritance",
        "subtopics": [
          { "subtopic": "Extending classes using extends", "questionsData": [] },
          { "subtopic": "Method overriding", "questionsData": [] },
          { "subtopic": "super keyword", "questionsData": [] },
          { "subtopic": "Types of inheritance: single, multilevel, hierarchical", "questionsData": [] }
        ]
      },
      {
        "topic": "10. Polymorphism",
        "subtopics": [
          { "subtopic": "Method overloading (compile-time polymorphism)", "questionsData": [] },
          { "subtopic": "Method overriding (runtime polymorphism)", "questionsData": [] },
          { "subtopic": "Dynamic method dispatch", "questionsData": [] }
        ]
      },
      {
        "topic": "11. Abstraction and Interfaces",
        "subtopics": [
          { "subtopic": "Abstract classes and methods", "questionsData": [] },
          { "subtopic": "Interfaces and their implementation", "questionsData": [] },
          { "subtopic": "Multiple inheritance using interfaces", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 3: Data Structures and Collections",
    "topics": [
      {
        "topic": "12. Arrays",
        "subtopics": [
          { "subtopic": "Single-dimensional and multi-dimensional arrays", "questionsData": [] },
          { "subtopic": "Array manipulation: sorting, searching", "questionsData": [] },
          { "subtopic": "Enhanced for loop", "questionsData": [] }
        ]
      },
      {
        "topic": "13. Collections Framework",
        "subtopics": [
          { "subtopic": "Lists: ArrayList, LinkedList", "questionsData": [] },
          { "subtopic": "Sets: HashSet, TreeSet", "questionsData": [] },
          { "subtopic": "Maps: HashMap, TreeMap", "questionsData": [] },
          { "subtopic": "Iterators and for-each loop", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 4: Exception Handling and File I/O",
    "topics": [
      {
        "topic": "14. Exception Handling",
        "subtopics": [
          { "subtopic": "Try-catch blocks", "questionsData": [] },
          { "subtopic": "Multiple catch blocks", "questionsData": [] },
          { "subtopic": "Finally block", "questionsData": [] },
          { "subtopic": "Custom exceptions", "questionsData": [] }
        ]
      },
      {
        "topic": "15. File Handling",
        "subtopics": [
          { "subtopic": "Reading from and writing to files using FileReader, FileWriter", "questionsData": [] },
          { "subtopic": "Using BufferedReader and BufferedWriter", "questionsData": [] },
          { "subtopic": "Handling file exceptions", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 5: Advanced Java Concepts",
    "topics": [
      {
        "topic": "16. Multithreading",
        "subtopics": [
          { "subtopic": "Creating threads using Thread class and Runnable interface", "questionsData": [] },
          { "subtopic": "Thread synchronization", "questionsData": [] },
          { "subtopic": "Thread lifecycle", "questionsData": [] }
        ]
      },
      {
        "topic": "17. Generics",
        "subtopics": [
          { "subtopic": "Generic classes and methods", "questionsData": [] },
          { "subtopic": "Type parameters", "questionsData": [] },
          { "subtopic": "Bounded types", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 6: Working with Libraries and APIs",
    "topics": [
      {
        "topic": "18. Java Standard Library",
        "subtopics": [
          { "subtopic": "Working with java.util, java.io, java.math", "questionsData": [] },
          { "subtopic": "Using StringBuilder and StringBuffer", "questionsData": [] },
          { "subtopic": "Date and time API (java.time)", "questionsData": [] }
        ]
      },
      {
        "topic": "19. Working with APIs",
        "subtopics": [
          { "subtopic": "Sending HTTP requests using HttpURLConnection", "questionsData": [] },
          { "subtopic": "Parsing JSON data using libraries like Gson or Jackson", "questionsData": [] }
        ]
      }
    ]
  },
  {
    "phase": "Phase 7: Project Development and Continuous Learning",
    "topics": [
      {
        "topic": "20. Version Control with Git",
        "subtopics": [
          { "subtopic": "Basic Git commands: git init, add, commit, push", "questionsData": [] },
          { "subtopic": "Branching and merging", "questionsData": [] },
          { "subtopic": "Working with GitHub", "questionsData": [] }
        ]
      },
      {
        "topic": "21. Building Projects",
        "subtopics": [
          { "subtopic": "Project 1: Simple Banking System", "questionsData": [] },
          { "subtopic": "Project 2: Student Management System", "questionsData": [] },
          { "subtopic": "Project 3: Online Quiz Application", "questionsData": [] }
        ]
      },
      {
        "topic": "22. Exploring Advanced Topics",
        "subtopics": [
          { "subtopic": "JavaFX for GUI development", "questionsData": [] },
          { "subtopic": "Spring Boot for web development", "questionsData": [] },
          { "subtopic": "Unit Testing with JUnit", "questionsData": [] }
        ]
      }
    ]
  }
]